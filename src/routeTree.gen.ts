/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.

import { Route as rootRoute } from "./routes/__root";
import { Route as SealedImport } from "./routes/_sealed";
import { Route as AuthLoginImport } from "./routes/auth/login";
import { Route as RegisterImport } from "./routes/auth/register";
import { Route as DashboardImport } from "./routes/_sealed/dashboard/dashboard";
import { Route as HelpImport } from "./routes/_sealed/help/help";
import { Route as TransactionsImport } from "./routes/_sealed/transactions/transactions";
import { Route as InvoicesImport } from "./routes/_sealed/invoices/invoices";
import { Route as MyWalletImport } from "./routes/_sealed/myWallet/my_wallet";
import { Route as SettingsImport } from "./routes/_sealed/settings/settings";

// Create/Update Routes
const SealedRoute = SealedImport.update({
  id: "/_sealed",
  getParentRoute: () => rootRoute,
} as any);

const AuthLoginRoute = AuthLoginImport.update({
  id: "/auth/login",
  path: "/auth/login",
  getParentRoute: () => rootRoute,
} as any);

const RegisterRoute = RegisterImport.update({
  id: "/auth/register",
  path: "/auth/register",
  getParentRoute: () => rootRoute,
} as any);

const DashboardRoute = DashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => SealedRoute,
} as any);

const HelpRoute = HelpImport.update({
  id: "/help/help",
  path: "/help/help",
  getParentRoute: () => SealedRoute,
} as any);

const TransactionsRoute = TransactionsImport.update({
  id: "/transactions",
  path: "/transactions",
  getParentRoute: () => SealedRoute,
} as any);

const InvoicesRoute = InvoicesImport.update({
  id: "/invoices",
  path: "/invoices",
  getParentRoute: () => SealedRoute,
} as any);

const MyWalletRoute = MyWalletImport.update({
  id: "/my_wallet",
  path: "/my_wallet",
  getParentRoute: () => SealedRoute,
} as any);

const SettingsRoute = SettingsImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => SealedRoute,
} as any);

// Populate the FileRoutesByPath interface
declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_sealed": {
      id: "/_sealed";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof SealedImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/login": {
      id: "/auth/login";
      path: "/auth/login";
      fullPath: "/auth/login";
      preLoaderRoute: typeof AuthLoginImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/register": {
      id: "/auth/register";
      path: "/auth/register";
      fullPath: "/auth/register";
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
    "/dashboard": {
      id: "/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardImport;
      parentRoute: typeof SealedRoute;
    };
    "/help/help": {
      id: "/help/help";
      path: "/help/help";
      fullPath: "/help/help";
      preLoaderRoute: typeof HelpImport;
      parentRoute: typeof SealedRoute;
    };
    "/transactions": {
      id: "/transactions";
      path: "/transactions";
      fullPath: "/transactions";
      preLoaderRoute: typeof TransactionsImport;
      parentRoute: typeof SealedRoute;
    };
    "/invoices": {
      id: "/invoices";
      path: "/invoices";
      fullPath: "/invoices";
      preLoaderRoute: typeof InvoicesImport;
      parentRoute: typeof SealedRoute;
    };
    "/my_wallet": {
      id: "/my_wallet";
      path: "/my_wallet";
      fullPath: "/my_wallet";
      preLoaderRoute: typeof MyWalletImport;
      parentRoute: typeof SealedRoute;
    };
    "/settings": {
      id: "/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsImport;
      parentRoute: typeof SealedRoute;
    };
  }
}

// Create and export the route tree
export interface FileRoutesByFullPath {
  "": typeof SealedRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/auth/register": typeof RegisterRoute;
  "/dashboard": typeof DashboardRoute;
  "/help/help": typeof HelpRoute;
  "/transactions": typeof TransactionsRoute;
  "/invoices": typeof InvoicesRoute;
  "/my_wallet": typeof MyWalletRoute;
  "/settings": typeof SettingsRoute;
}

export interface FileRoutesByTo {
  "/auth/login": typeof AuthLoginRoute;
  "/auth/register": typeof RegisterRoute;
  "/dashboard": typeof DashboardRoute;
  "/help/help": typeof HelpRoute;
  "/transactions": typeof TransactionsRoute;
  "/invoices": typeof InvoicesRoute;
  "/my_wallet": typeof MyWalletRoute;
  "/settings": typeof SettingsRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_sealed": typeof SealedRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/auth/register": typeof RegisterRoute;
  "/dashboard": typeof DashboardRoute;
  "/help/help": typeof HelpRoute;
  "/transactions": typeof TransactionsRoute;
  "/invoices": typeof InvoicesRoute;
  "/my_wallet": typeof MyWalletRoute;
  "/settings": typeof SettingsRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/auth/login"
    | "/auth/register"
    | "/dashboard"
    | "/help/help"
    | "/transactions"
    | "/invoices"
    | "/my_wallet"
    | "/settings"
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/auth/login"
    | "/auth/register"
    | "/dashboard"
    | "/help/help"
    | "/transactions"
    | "/invoices"
    | "/my_wallet"
    | "/settings"
  id:
    | "__root__"
    | "/_sealed"
    | "/auth/login"
    | "/auth/register"
    | "/dashboard"
    | "/help/help"
    | "/transactions"
    | "/invoices"
    | "/my_wallet"
    | "/settings"
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  SealedRoute: typeof SealedRoute;
  AuthLoginRoute: typeof AuthLoginRoute;
  RegisterRoute: typeof RegisterRoute;
  DashboardRoute: typeof DashboardRoute;
  HelpRoute: typeof HelpRoute;
  TransactionsRoute: typeof TransactionsRoute;
  InvoicesRoute: typeof InvoicesRoute;
  MyWalletRoute: typeof MyWalletRoute;
  SettingsRoute: typeof SettingsRoute;
}

const rootRouteChildren: RootRouteChildren = {
  SealedRoute: SealedRoute,
  AuthLoginRoute: AuthLoginRoute,
  RegisterRoute: RegisterRoute,
  DashboardRoute: DashboardRoute,
  HelpRoute: HelpRoute,
  TransactionsRoute: TransactionsRoute,
  InvoicesRoute: InvoicesRoute,
  MyWalletRoute: MyWalletRoute,
  SettingsRoute: SettingsRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
